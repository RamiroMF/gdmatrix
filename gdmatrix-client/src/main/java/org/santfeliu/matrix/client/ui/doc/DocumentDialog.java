/*
 * GDMatrix
 *  
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *  
 * This program is licensed and may be used, modified and redistributed under 
 * the terms of the European Public License (EUPL), either version 1.1 or (at 
 * your option) any later version as soon as they are approved by the European 
 * Commission.
 *  
 * Alternatively, you may redistribute and/or modify this program under the 
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either  version 3 of the License, or (at your option) 
 * any later version. 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *    
 * See the licenses for the specific language governing permissions, limitations 
 * and more details.
 *    
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along 
 * with this program; if not, you may find them at: 
 *    
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/ 
 * and 
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.matrix.client.ui.doc;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import org.matrix.dic.Property;
import org.santfeliu.matrix.client.Command;
import org.santfeliu.util.TextUtils;

/**
 *
 * @author blanquepa
 */
public class DocumentDialog extends javax.swing.JFrame
{
  public static final int NO = 0;
  public static final int YES = 1;  

  private int response = -1;  
  private File exploreDir;
  private File file;
  private final Object lock = new Object();
  private Command command;

  /**
   * Creates new form DocumentDialog
   */
  public DocumentDialog(Command command)
  {
    this.command = command;
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    titleLabel = new javax.swing.JLabel();
    typeLabel = new javax.swing.JLabel();
    typeComboBox = new javax.swing.JComboBox();
    languageLabel = new javax.swing.JLabel();
    languageComboBox = new javax.swing.JComboBox();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    titleTextArea = new javax.swing.JTextArea();
    titleLabel1 = new javax.swing.JLabel();
    filenameField = new javax.swing.JTextField();
    exploreButton = new javax.swing.JButton();
    stateLabel = new javax.swing.JLabel();
    stateComboBox = new javax.swing.JComboBox();
    captureDateLabel = new javax.swing.JLabel();
    captureDateTextField = new javax.swing.JTextField();
    changeDateLabel = new javax.swing.JLabel();
    changeDateTextField = new javax.swing.JTextField();
    lockedByTextField = new javax.swing.JTextField();
    lockedByLabel = new javax.swing.JLabel();
    captureUserLabel = new javax.swing.JLabel();
    captureUserTextField = new javax.swing.JTextField();
    changeUserLabel = new javax.swing.JLabel();
    changeUserTextField = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    propertiesTable = new javax.swing.JTable();
    addPropertyButton = new javax.swing.JButton();
    removePropertyButton = new javax.swing.JButton();
    lockUnlockButton = new javax.swing.JToggleButton();
    propertiesLabel = new javax.swing.JLabel();
    jLayeredPane1 = new javax.swing.JLayeredPane();
    docIdLabel = new javax.swing.JLabel();
    docIdTextField = new javax.swing.JTextField();
    versionLabel = new javax.swing.JLabel();
    versionTextField = new javax.swing.JTextField();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/santfeliu/matrix/client/ui/doc/DocumentDialogBundle"); // NOI18N
    setTitle(bundle.getString("DocumentDialog.title")); // NOI18N
    setAlwaysOnTop(true);
    setBounds(new java.awt.Rectangle(0, 0, 0, 0));
    setResizable(false);
    setType(java.awt.Window.Type.POPUP);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    titleLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    titleLabel.setText(bundle.getString("DocumentDialog.titleLabel.text")); // NOI18N

    typeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    typeLabel.setText(bundle.getString("DocumentDialog.typeLabel.text")); // NOI18N

    typeComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    typeComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        typeComboBoxActionPerformed(evt);
      }
    });

    languageLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    languageLabel.setText(bundle.getString("DocumentDialog.languageLabel.text")); // NOI18N

    languageComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    languageComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        languageComboBoxActionPerformed(evt);
      }
    });

    okButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/client/ui/resources/ok.png"))); // NOI18N
    okButton.setText(bundle.getString("DocumentDialog.okButton.text")); // NOI18N
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });

    cancelButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/client/ui/resources/cancel.png"))); // NOI18N
    cancelButton.setText(bundle.getString("DocumentDialog.cancelButton.text")); // NOI18N
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    titleTextArea.setColumns(20);
    titleTextArea.setLineWrap(true);
    titleTextArea.setRows(4);
    titleTextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    titleLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    titleLabel1.setText(bundle.getString("DocumentDialog.titleLabel1.text")); // NOI18N

    filenameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    filenameField.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        filenameFieldMouseClicked(evt);
      }
    });
    filenameField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        filenameFieldActionPerformed(evt);
      }
    });

    exploreButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    exploreButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/client/ui/resources/explore.png"))); // NOI18N
    exploreButton.setText(bundle.getString("DocumentDialog.exploreButton.text")); // NOI18N
    exploreButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exploreButtonActionPerformed(evt);
      }
    });

    stateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    stateLabel.setText(bundle.getString("DocumentDialog.stateLabel.text")); // NOI18N

    stateComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    stateComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stateComboBoxActionPerformed(evt);
      }
    });

    captureDateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    captureDateLabel.setText(bundle.getString("DocumentDialog.captureDateLabel.text")); // NOI18N

    captureDateTextField.setEditable(false);
    captureDateTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    captureDateTextField.setText(bundle.getString("DocumentDialog.captureDateTextField.text")); // NOI18N
    captureDateTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

    changeDateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    changeDateLabel.setText(bundle.getString("DocumentDialog.changeDateLabel.text")); // NOI18N

    changeDateTextField.setEditable(false);
    changeDateTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    changeDateTextField.setText(bundle.getString("DocumentDialog.changeDateTextField.text")); // NOI18N
    changeDateTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

    lockedByTextField.setEditable(false);
    lockedByTextField.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    lockedByTextField.setForeground(new java.awt.Color(255, 0, 0));
    lockedByTextField.setText(bundle.getString("DocumentDialog.lockedByTextField.text")); // NOI18N
    lockedByTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    lockedByTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        lockedByTextFieldActionPerformed(evt);
      }
    });

    lockedByLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    lockedByLabel.setText(bundle.getString("DocumentDialog.lockedByLabel.text")); // NOI18N

    captureUserLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    captureUserLabel.setText(bundle.getString("DocumentDialog.captureUserLabel.text")); // NOI18N

    captureUserTextField.setEditable(false);
    captureUserTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    captureUserTextField.setText(bundle.getString("DocumentDialog.captureUserTextField.text")); // NOI18N
    captureUserTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

    changeUserLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    changeUserLabel.setText(bundle.getString("DocumentDialog.changeUserLabel.text")); // NOI18N

    changeUserTextField.setEditable(false);
    changeUserTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    changeUserTextField.setText(bundle.getString("DocumentDialog.changeUserTextField.text")); // NOI18N
    changeUserTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    changeUserTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        changeUserTextFieldActionPerformed(evt);
      }
    });

    propertiesTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    propertiesTable.setModel(new PropertyTableModel(Collections.EMPTY_LIST));
    propertiesTable.setDragEnabled(true);
    jScrollPane1.setViewportView(propertiesTable);
    if (propertiesTable.getColumnModel().getColumnCount() > 0) {
      propertiesTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("DocumentDialog.propertiesTable.columnModel.title0_1")); // NOI18N
      propertiesTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("DocumentDialog.propertiesTable.columnModel.title1_1")); // NOI18N
    }

    addPropertyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/client/ui/resources/insert.png"))); // NOI18N
    addPropertyButton.setText(bundle.getString("DocumentDialog.addPropertyButton.text")); // NOI18N
    addPropertyButton.setToolTipText(bundle.getString("DocumentDialog.addPropertyButton.toolTipText")); // NOI18N
    addPropertyButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    addPropertyButton.setMaximumSize(new java.awt.Dimension(32, 32));
    addPropertyButton.setMinimumSize(new java.awt.Dimension(32, 32));
    addPropertyButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addPropertyButtonActionPerformed(evt);
      }
    });

    removePropertyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/client/ui/resources/remove.png"))); // NOI18N
    removePropertyButton.setText(bundle.getString("DocumentDialog.removePropertyButton.text")); // NOI18N
    removePropertyButton.setToolTipText(bundle.getString("DocumentDialog.removePropertyButton.toolTipText")); // NOI18N
    removePropertyButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    removePropertyButton.setMaximumSize(new java.awt.Dimension(32, 32));
    removePropertyButton.setMinimumSize(new java.awt.Dimension(32, 32));
    removePropertyButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        removePropertyButtonActionPerformed(evt);
      }
    });

    lockUnlockButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    lockUnlockButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/client/ui/resources/lock-open.png"))); // NOI18N
    lockUnlockButton.setText(bundle.getString("DocumentDialog.lockUnlockButton.text")); // NOI18N
    lockUnlockButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        lockUnlockButtonActionPerformed(evt);
      }
    });

    propertiesLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    propertiesLabel.setText(bundle.getString("DocumentDialog.propertiesLabel.text")); // NOI18N

    jLayeredPane1.setForeground(new java.awt.Color(255, 255, 153));

    docIdLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    docIdLabel.setText(bundle.getString("DocumentDialog.docIdLabel.text")); // NOI18N

    docIdTextField.setEditable(false);
    docIdTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    docIdTextField.setText(bundle.getString("DocumentDialog.docIdTextField.text")); // NOI18N
    docIdTextField.setBorder(null);

    versionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    versionLabel.setText(bundle.getString("DocumentDialog.versionLabel.text")); // NOI18N

    versionTextField.setEditable(false);
    versionTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    versionTextField.setText(bundle.getString("DocumentDialog.versionTextField.text")); // NOI18N
    versionTextField.setBorder(null);

    jLayeredPane1.setLayer(docIdLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jLayeredPane1.setLayer(docIdTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jLayeredPane1.setLayer(versionLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jLayeredPane1.setLayer(versionTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
    jLayeredPane1.setLayout(jLayeredPane1Layout);
    jLayeredPane1Layout.setHorizontalGroup(
      jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jLayeredPane1Layout.createSequentialGroup()
        .addComponent(docIdLabel)
        .addGap(18, 18, 18)
        .addComponent(docIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(40, 40, 40)
        .addComponent(versionLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(versionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jLayeredPane1Layout.setVerticalGroup(
      jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jLayeredPane1Layout.createSequentialGroup()
        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(docIdLabel)
          .addComponent(docIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(versionLabel)
          .addComponent(versionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 6, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLayeredPane1)
            .addContainerGap())
          .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane1)
            .addContainerGap())
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(changeDateLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(captureDateLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
              .addComponent(lockedByLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(changeDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
              .addComponent(captureDateTextField)
              .addComponent(lockedByTextField))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addComponent(captureUserLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                  .addComponent(changeUserLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(captureUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(changeUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(addPropertyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(removePropertyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(propertiesLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(languageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(typeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(titleLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(stateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(stateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lockUnlockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(layout.createSequentialGroup()
                  .addComponent(filenameField, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(exploreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(titleTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(7, 7, 7))))
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addPropertyButton, removePropertyButton});

    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(exploreButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
          .addComponent(filenameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(titleLabel1))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(titleTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(titleLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(typeLabel)
          .addGroup(layout.createSequentialGroup()
            .addComponent(typeComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(languageLabel))))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(stateLabel)
          .addComponent(stateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lockUnlockButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(propertiesLabel)
        .addGap(4, 4, 4)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(addPropertyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(removePropertyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(captureDateLabel)
          .addComponent(captureDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(captureUserLabel)
          .addComponent(captureUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(changeDateLabel)
          .addComponent(changeDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(changeUserLabel)
          .addComponent(changeUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(lockedByLabel)
          .addComponent(lockedByTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(okButton))
        .addGap(18, 18, 18))
    );

    layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelButton, okButton});

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_typeComboBoxActionPerformed
  {//GEN-HEADEREND:event_typeComboBoxActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_typeComboBoxActionPerformed

  private void languageComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_languageComboBoxActionPerformed
  {//GEN-HEADEREND:event_languageComboBoxActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_languageComboBoxActionPerformed

  private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
  {//GEN-HEADEREND:event_okButtonActionPerformed
    sendResponse(YES);
  }//GEN-LAST:event_okButtonActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed
    sendResponse(NO);
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void exploreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exploreButtonActionPerformed
    exploreDirectory();
  }//GEN-LAST:event_exploreButtonActionPerformed

  private void filenameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filenameFieldActionPerformed
    
  }//GEN-LAST:event_filenameFieldActionPerformed

  private void filenameFieldMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_filenameFieldMouseClicked
  {//GEN-HEADEREND:event_filenameFieldMouseClicked
    if (filenameField.getText() == null || filenameField.getText().length() == 0) exploreDirectory();
  }//GEN-LAST:event_filenameFieldMouseClicked

  private void stateComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stateComboBoxActionPerformed
  {//GEN-HEADEREND:event_stateComboBoxActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_stateComboBoxActionPerformed

  private void changeUserTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_changeUserTextFieldActionPerformed
  {//GEN-HEADEREND:event_changeUserTextFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_changeUserTextFieldActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    sendResponse(NO);
  }//GEN-LAST:event_formWindowClosing

  private void addPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPropertyButtonActionPerformed
    int selectedRow = propertiesTable.getSelectedRow();
    PropertyTableModel tableModel = (PropertyTableModel)propertiesTable.getModel();
    tableModel.addRow(selectedRow, new Property());
    tableModel.fireTableRowsInserted(selectedRow, selectedRow);
    selectedRow = selectedRow > 0 ? selectedRow + 1 : tableModel.getRowCount() - 1;    
    propertiesTable.changeSelection(selectedRow, 0, false, false);
  }//GEN-LAST:event_addPropertyButtonActionPerformed

  private void removePropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePropertyButtonActionPerformed
    int selectedRow = propertiesTable.getSelectedRow();
    if (selectedRow < 0)
      selectedRow = propertiesTable.getRowCount() - 1;
    if (selectedRow >= 0)  
    {
      PropertyTableModel tableModel = (PropertyTableModel)propertiesTable.getModel();
      tableModel.removeRow(selectedRow);
      tableModel.fireTableRowsDeleted(selectedRow, selectedRow);
    }
  }//GEN-LAST:event_removePropertyButtonActionPerformed

  private void lockUnlockButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lockUnlockButtonActionPerformed
  {//GEN-HEADEREND:event_lockUnlockButtonActionPerformed
    // TODO add your handling code here:
    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/santfeliu/matrix/client/ui/doc/DocumentDialogBundle"); // NOI18N
    if (!lockUnlockButton.isSelected())
    {
      lockedByTextField.setText(null);
      lockUnlockButton.setText(bundle.getString("DocumentDialog.lockUnlockButton.text"));
      lockUnlockButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/client/ui/resources/lock-open.png"))); // NOI18N      
      lockedByLabel.setText(bundle.getString("DocumentDialog.lockUnlockButton.text"));
    }
    else
    {
      lockedByTextField.setText((String)command.getProperties().get("userId"));
      lockUnlockButton.setText(bundle.getString("DocumentDialog.lockUnlockButton.text2"));      
      lockUnlockButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/client/ui/resources/lock.png"))); // NOI18N      
      lockedByLabel.setText(bundle.getString("DocumentDialog.lockedByLabel.text"));      
    }
  }//GEN-LAST:event_lockUnlockButtonActionPerformed

  private void lockedByTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lockedByTextFieldActionPerformed
  {//GEN-HEADEREND:event_lockedByTextFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_lockedByTextFieldActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(DocumentDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(DocumentDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(DocumentDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(DocumentDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new DocumentDialog(null).setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addPropertyButton;
  private javax.swing.JButton cancelButton;
  private javax.swing.JLabel captureDateLabel;
  private javax.swing.JTextField captureDateTextField;
  private javax.swing.JLabel captureUserLabel;
  private javax.swing.JTextField captureUserTextField;
  private javax.swing.JLabel changeDateLabel;
  private javax.swing.JTextField changeDateTextField;
  private javax.swing.JLabel changeUserLabel;
  private javax.swing.JTextField changeUserTextField;
  private javax.swing.JLabel docIdLabel;
  private javax.swing.JTextField docIdTextField;
  private javax.swing.JButton exploreButton;
  private javax.swing.JTextField filenameField;
  private javax.swing.JLayeredPane jLayeredPane1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JComboBox languageComboBox;
  private javax.swing.JLabel languageLabel;
  private javax.swing.JToggleButton lockUnlockButton;
  private javax.swing.JLabel lockedByLabel;
  private javax.swing.JTextField lockedByTextField;
  private javax.swing.JButton okButton;
  private javax.swing.JLabel propertiesLabel;
  private javax.swing.JTable propertiesTable;
  private javax.swing.JButton removePropertyButton;
  private javax.swing.JComboBox stateComboBox;
  private javax.swing.JLabel stateLabel;
  private javax.swing.JLabel titleLabel;
  private javax.swing.JLabel titleLabel1;
  private javax.swing.JTextArea titleTextArea;
  private javax.swing.JComboBox typeComboBox;
  private javax.swing.JLabel typeLabel;
  private javax.swing.JLabel versionLabel;
  private javax.swing.JTextField versionTextField;
  // End of variables declaration//GEN-END:variables
  
  public JTextField getDocIdTextField()
  {
    return docIdTextField;
  }
  
  public JTextField getVersionTextField()
  {
    return versionTextField;
  }  
  
  public JComboBox getLanguageComboBox() 
  {
    return languageComboBox;
  }

  public JTextArea getTitleTextArea() 
  {
    return titleTextArea;
  }

  public JComboBox getTypeComboBox() 
  {
    return typeComboBox;
  }

  public JComboBox getStateComboBox()
  {
    return stateComboBox;
  }

  public JTextField getCaptureDateTextField()
  {
    return captureDateTextField;
  }

  public JTextField getCaptureUserTextField()
  {
    return captureUserTextField;
  }

  public JTextField getChangeDateTextField()
  {
    return changeDateTextField;
  }

  public JTextField getChangeUserTextField()
  {
    return changeUserTextField;
  }

  public JTextField getLockedByTextField()
  {
    return lockedByTextField;
  }

  public JTable getPropertiesTable() {
    return propertiesTable;
  }

  public void setPropertiesTable(JTable propertiesTable) {
    this.propertiesTable = propertiesTable;
  }

  public JToggleButton getLockUnlockButton()
  {
    return lockUnlockButton;
  }

  public void setLockUnlockButton(JToggleButton lockUnlockButton)
  {
    this.lockUnlockButton = lockUnlockButton;
  }

  public File getFile()
  {
    return file;
  }
  
  public int waitForResponse() throws InterruptedException
  {
    while (response == -1 && isShowing())
    {
      synchronized (lock)
      {
        lock.wait();
      }
    }
    return response;
  }

  private void sendResponse(int response)
  {
    this.response = response;
    setVisible(false);
    dispose();
    synchronized (lock)
    {
      lock.notifyAll();
    }
  }  
  
  private void exploreDirectory()
  {
    setVisible(false);
    try
    {
      JFileChooser dialog = new JFileChooser();
      dialog.setDialogTitle("File chooser");
      if (exploreDir != null)
        dialog.setCurrentDirectory(exploreDir);
      int result = dialog.showOpenDialog(null);
      if (result == JFileChooser.APPROVE_OPTION)
      {
        file = dialog.getSelectedFile();
        exploreDir = file.getParentFile();
        filenameField.setText(file.getAbsolutePath());
        if (this.titleTextArea.getText() == null || this.titleTextArea.getText().length() == 0)
        {
          if (file.getName().contains("."))
          {
            String filename = file.getName();
            titleTextArea.setText(filename.substring(0, filename.lastIndexOf(".")));        
          }
        }
      }
    }
    finally
    {
      setVisible(true);
    }    
  }

  public void setPropertyTableModel(List<Property> docProps) 
  {
    getPropertiesTable().setModel(new PropertyTableModel(docProps));
  }
  
  public class PropertyTableModel extends AbstractTableModel implements TableModel
  {
    ArrayList<Property> properties;
    
    public PropertyTableModel(List<Property> properties)
    {
      this.properties = new ArrayList();
      if (properties != null)
        this.properties.addAll(properties);
    }
    
    public int getRowCount() 
    {
      return properties.size();
    }

    public int getColumnCount() 
    {
      return 2;
    }

    @Override
    public String getColumnName(int columnIndex) 
    {
      java.util.ResourceBundle bundle = 
        java.util.ResourceBundle.getBundle("org/santfeliu/matrix/client/ui/doc/DocumentDialogBundle"); // NOI18N
      if (columnIndex == 0)
        return bundle.getString("DocumentDialog.propertiesTable.columnModel.title0_1");
      else
        return bundle.getString("DocumentDialog.propertiesTable.columnModel.title1_1");
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) 
    {
      return String.class;
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) 
    {
      return true;
    }

    public Object getValueAt(int rowIndex, int columnIndex) 
    {
      if (properties.size() > rowIndex)
      {
        Property property = properties.get(rowIndex);
        if (columnIndex == 0)
          return property.getName();
        else
        {
          if (property.getValue() != null && property.getValue().size() > 1)
            return property.getValue();
          else 
            return TextUtils.collectionToString(property.getValue());
        }
      }
      return null;
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) 
    {
      if (properties.size() > rowIndex)
      {
        Property property = properties.get(rowIndex);
        if (property != null)
        {
          if (columnIndex == 0)
            property.setName(String.valueOf(aValue));
          else
          {
            property.getValue().clear();
            String value = (String)aValue;
            if (value.startsWith("[") && value.endsWith("]"))
            {
              value = value.substring(1);
              value = value.substring(0, value.length() - 1);
              property.getValue().addAll(TextUtils.stringToList(value, ","));
            }
            else
              property.getValue().add(value);
          }
        }
      }
    }
    
    public List<Property> getValues()
    {
      return properties;
    }

    public void addRow(int rowIndex, Property property)
    {
      if (rowIndex < 0)
        rowIndex = properties.size();
      else
        rowIndex++;
      properties.add(rowIndex, property);
      fireTableRowsInserted(rowIndex, rowIndex);
    }
    
    public void removeRow(int rowIndex)
    {
      properties.remove(rowIndex);
      fireTableRowsDeleted(rowIndex, rowIndex);
    }
    
  }

}
