/*
 * GDMatrix
 *  
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *  
 * This program is licensed and may be used, modified and redistributed under 
 * the terms of the European Public License (EUPL), either version 1.1 or (at 
 * your option) any later version as soon as they are approved by the European 
 * Commission.
 *  
 * Alternatively, you may redistribute and/or modify this program under the 
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either  version 3 of the License, or (at your option) 
 * any later version. 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *    
 * See the licenses for the specific language governing permissions, limitations 
 * and more details.
 *    
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along 
 * with this program; if not, you may find them at: 
 *    
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/ 
 * and 
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.matrix.client.ui.scanner;

/**
 *
 * @author realor
 */
public class ScanOptionsDialog extends javax.swing.JDialog
{
  CmdTwain cmdTwain;
  /**
   * Creates new form ScanOptionsDialog
   */
  public ScanOptionsDialog(java.awt.Frame parent, CmdTwain cmdTwain)
  {
    super(parent, true);
    initComponents();
    this.cmdTwain = cmdTwain;
    brightnessSlider.setValue(-cmdTwain.getBrightness() / 100);
    contrastSlider.setValue(cmdTwain.getContrast() / 100);
    feederCheckBox.setSelected(cmdTwain.isFeeder());
    duplexCheckBox.setSelected(cmdTwain.isDuplex());
    autoscanCheckBox.setSelected(cmdTwain.isAutoscan());
    autofeedCheckBox.setSelected(cmdTwain.isAutofeed());    
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    brightnessLabel = new javax.swing.JLabel();
    brightnessSlider = new javax.swing.JSlider();
    contrastLabel = new javax.swing.JLabel();
    contrastSlider = new javax.swing.JSlider();
    feederCheckBox = new javax.swing.JCheckBox();
    duplexCheckBox = new javax.swing.JCheckBox();
    autoscanCheckBox = new javax.swing.JCheckBox();
    autofeedCheckBox = new javax.swing.JCheckBox();
    southPanel = new javax.swing.JPanel();
    acceptButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    brightnessValueLabel = new javax.swing.JLabel();
    contrastValueLabel = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/santfeliu/matrix/client/ui/scanner/resources/ScanFrame"); // NOI18N
    setTitle(bundle.getString("options")); // NOI18N

    brightnessLabel.setText(bundle.getString("brightness")); // NOI18N

    brightnessSlider.setMajorTickSpacing(1);
    brightnessSlider.setMaximum(10);
    brightnessSlider.setMinimum(-10);
    brightnessSlider.setPaintTicks(true);
    brightnessSlider.setSnapToTicks(true);
    brightnessSlider.setValue(0);
    brightnessSlider.addChangeListener(new javax.swing.event.ChangeListener()
    {
      public void stateChanged(javax.swing.event.ChangeEvent evt)
      {
        brightnessChanged(evt);
      }
    });

    contrastLabel.setText(bundle.getString("contrast")); // NOI18N

    contrastSlider.setMajorTickSpacing(1);
    contrastSlider.setMaximum(10);
    contrastSlider.setMinimum(-10);
    contrastSlider.setPaintTicks(true);
    contrastSlider.setSnapToTicks(true);
    contrastSlider.setValue(0);
    contrastSlider.addChangeListener(new javax.swing.event.ChangeListener()
    {
      public void stateChanged(javax.swing.event.ChangeEvent evt)
      {
        contrastChanged(evt);
      }
    });

    feederCheckBox.setText(bundle.getString("feeder")); // NOI18N

    duplexCheckBox.setText(bundle.getString("duplex")); // NOI18N

    autoscanCheckBox.setText(bundle.getString("autoscan")); // NOI18N

    autofeedCheckBox.setText(bundle.getString("autofeed")); // NOI18N

    acceptButton.setText(bundle.getString("accept")); // NOI18N
    acceptButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        acceptButtonActionPerformed(evt);
      }
    });
    southPanel.add(acceptButton);

    cancelButton.setText(bundle.getString("cancel")); // NOI18N
    cancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelButtonActionPerformed(evt);
      }
    });
    southPanel.add(cancelButton);

    brightnessValueLabel.setText("0");

    contrastValueLabel.setText("0");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(brightnessSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(contrastSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(brightnessLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(brightnessValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(contrastLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contrastValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(autofeedCheckBox)
                  .addComponent(autoscanCheckBox)
                  .addComponent(duplexCheckBox)
                  .addComponent(feederCheckBox))
                .addGap(0, 0, Short.MAX_VALUE)))
            .addGap(10, 10, 10))))
      .addComponent(southPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(brightnessLabel)
          .addComponent(brightnessValueLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(brightnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(contrastLabel)
          .addComponent(contrastValueLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(contrastSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(feederCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(duplexCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(autoscanCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(autofeedCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(southPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_acceptButtonActionPerformed
  {//GEN-HEADEREND:event_acceptButtonActionPerformed
    cmdTwain.setBrightness(-brightnessSlider.getValue() * 100);
    cmdTwain.setContrast(contrastSlider.getValue() * 100);
    cmdTwain.setFeeder(feederCheckBox.isSelected());
    cmdTwain.setDuplex(duplexCheckBox.isSelected());
    cmdTwain.setAutoscan(autoscanCheckBox.isSelected());
    cmdTwain.setAutofeed(autofeedCheckBox.isSelected());
    setVisible(false);
    dispose();
  }//GEN-LAST:event_acceptButtonActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed
    setVisible(false);
    dispose();
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void brightnessChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_brightnessChanged
  {//GEN-HEADEREND:event_brightnessChanged
    brightnessValueLabel.setText("" + brightnessSlider.getValue());
  }//GEN-LAST:event_brightnessChanged

  private void contrastChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_contrastChanged
  {//GEN-HEADEREND:event_contrastChanged
    contrastValueLabel.setText("" + contrastSlider.getValue());
  }//GEN-LAST:event_contrastChanged

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (Exception ex)
    {
    }
    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        ScanOptionsDialog dialog = new ScanOptionsDialog(new javax.swing.JFrame(), new CmdTwain());
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton acceptButton;
  private javax.swing.JCheckBox autofeedCheckBox;
  private javax.swing.JCheckBox autoscanCheckBox;
  private javax.swing.JLabel brightnessLabel;
  private javax.swing.JSlider brightnessSlider;
  private javax.swing.JLabel brightnessValueLabel;
  private javax.swing.JButton cancelButton;
  private javax.swing.JLabel contrastLabel;
  private javax.swing.JSlider contrastSlider;
  private javax.swing.JLabel contrastValueLabel;
  private javax.swing.JCheckBox duplexCheckBox;
  private javax.swing.JCheckBox feederCheckBox;
  private javax.swing.JPanel southPanel;
  // End of variables declaration//GEN-END:variables
}
