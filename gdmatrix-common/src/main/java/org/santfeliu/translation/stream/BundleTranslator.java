/*
 * GDMatrix
 *  
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *  
 * This program is licensed and may be used, modified and redistributed under 
 * the terms of the European Public License (EUPL), either version 1.1 or (at 
 * your option) any later version as soon as they are approved by the European 
 * Commission.
 *  
 * Alternatively, you may redistribute and/or modify this program under the 
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either  version 3 of the License, or (at your option) 
 * any later version. 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *    
 * See the licenses for the specific language governing permissions, limitations 
 * and more details.
 *    
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along 
 * with this program; if not, you may find them at: 
 *    
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/ 
 * and 
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.translation.stream;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.util.Date;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import org.santfeliu.translation.string.GoogleStringTranslator;
import org.santfeliu.translation.util.Normalizer;

/**
 *
 * @author realor
 */
public class BundleTranslator extends TextTranslator
{
  @Override
  public void translate(Reader reader, Writer writer,
    String language, String group) throws IOException
  {
    try
    {
      Properties inProps = new Properties();
      inProps.load(reader);
      writer.write("# Autogenerated bundle for '" + language + "' locale.\n");
      writer.write("# Creation date: " + new Date() + "\n\n");
      Set set = inProps.keySet();
      TreeSet sortedSet = new TreeSet();
      sortedSet.addAll(set);
      Normalizer normalizer = new Normalizer();
      for (Object elem : sortedSet)
      {
        String key = (String)elem;
        String text = inProps.getProperty(key);
        // replace quotes and parameters
        text = text.replaceAll("''", "'");
        text = text.replaceAll("\\{", "(*{");
        text = text.replaceAll("\\}", "}*)");
        normalizer.append(text);
        String normalizedText = normalizer.end();
        String translation =
          stringTranslator.translate(normalizedText, language, group);
        normalizer.append(translation);
        translation = normalizer.end();
        boolean hasParameters = translation.indexOf("{0}") != -1;
        StringBuffer buffer = new StringBuffer();        
        for (char ch : translation.toCharArray())
        {
          if (ch == ':')
          {
            buffer.append("\\:");
          }
          else if (ch == '=')
          {
            buffer.append("\\=");
          }
          else if (ch == '\'' && hasParameters)
          {
            buffer.append("''");
          }
          else if (ch < 32 || ch > 128)
          {
            String s = "0000" + Integer.toHexString(ch);
            s = s.substring(s.length() - 4, s.length());
            buffer.append("\\u" + s);
          }
          else buffer.append(ch);
        }
        writer.write(key + " = " + buffer.toString() + "\n");
      }
      writer.flush();
    }
    catch (Exception ex)
    {
      ex.printStackTrace();
    }
  }

  public void generateBundles(File baseDir,
    String suffix, String[] languages, boolean updateExisting)
    throws IOException
  {
    File[] files = baseDir.listFiles();
    for (File file : files)
    {
      if (file.isFile())
      {
        if (file.getName().endsWith(suffix + ".properties"))
        {
          System.out.println("Generating bundle for " + file + "...");
          for (String language : languages)
          {
            String name = file.getName();
            int index = name.lastIndexOf(".");
            name = name.substring(0, index);

            File genFile = new File(file.getParent() + "/" +
              name + "_" + language + ".properties");
            if (!genFile.exists() ||
              file.lastModified() > genFile.lastModified())
            {
              System.out.println(">" + genFile);
              FileReader reader = new FileReader(file);
              try
              {
                FileWriter writer = new FileWriter(genFile);
                try
                {
                  translate(reader, writer, language, "bundle");
                }
                finally
                {
                  writer.close();
                }
              }
              finally
              {
                reader.close();
              }
            }
          }
        }
      }
      else if (file.isDirectory())
      {
        generateBundles(file, suffix, languages, updateExisting);
      }
    }
  }

  public static void main(String args[])
  {
    try
    {
      BundleTranslator tr = new BundleTranslator();
      tr.setStringTranslator(new GoogleStringTranslator());
      tr.generateBundles(new File("c:/matrix/src/org/santfeliu/web/obj/resources"),
        "ObjectBundle", new String[]{
        "fr", "de", "it", "ru", "ar", "zh", "ro", "bg", "pt"}, true);
    }
    catch (Exception ex)
    {
      ex.printStackTrace();
    }
  }
}
