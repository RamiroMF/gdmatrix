/*
 * GDMatrix
 *  
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *  
 * This program is licensed and may be used, modified and redistributed under 
 * the terms of the European Public License (EUPL), either version 1.1 or (at 
 * your option) any later version as soon as they are approved by the European 
 * Commission.
 *  
 * Alternatively, you may redistribute and/or modify this program under the 
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either  version 3 of the License, or (at your option) 
 * any later version. 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *    
 * See the licenses for the specific language governing permissions, limitations 
 * and more details.
 *    
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along 
 * with this program; if not, you may find them at: 
 *    
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/ 
 * and 
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.classif.importer;

import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author realor
 */
public class ClassImporter extends javax.swing.JDialog
{
  private ImportTask task;
  /**
   * Creates new form ClassImporter
   */
  public ClassImporter()
  {
    initComponents();
    initImporter();
  }
  
  public String getUrl()
  {
    return urlTextField.getText();
  }  
  
  public String getUserId()
  {
    return usernameTextField.getText();
  }

  public String getPassword()
  {
    return new String(passwordField.getPassword());
  }

  public String getNonTerminalFile()
  {
    return nonTerminalTextField.getText();
  }
  
  public String getTerminalFile()
  {
    return terminalTextField.getText();
  }
  
  public void setClassTreeModel(final DefaultTreeModel model)
  {
    SwingUtilities.invokeLater(new Runnable()
    {
      @Override
      public void run()
      {
        classTree.setModel(model);
      }
    });
  }
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    mainPanel = new javax.swing.JPanel();
    northPanel = new javax.swing.JPanel();
    nonTerminalLabel = new javax.swing.JLabel();
    nonTerminalTextField = new javax.swing.JTextField();
    selectNonTerminalButton = new javax.swing.JButton();
    terminalLabel = new javax.swing.JLabel();
    terminalTextField = new javax.swing.JTextField();
    selectTerminalButton = new javax.swing.JButton();
    urlLabel = new javax.swing.JLabel();
    urlTextField = new javax.swing.JTextField();
    usernameLabel = new javax.swing.JLabel();
    usernameTextField = new javax.swing.JTextField();
    passwordLabel = new javax.swing.JLabel();
    passwordField = new javax.swing.JPasswordField();
    tabbedPane = new javax.swing.JTabbedPane();
    treeScrollPane = new javax.swing.JScrollPane();
    classTree = new javax.swing.JTree();
    summaryScrollPane = new javax.swing.JScrollPane();
    summaryTextArea = new javax.swing.JTextArea();
    detailScrollPane = new javax.swing.JScrollPane();
    detailTextArea = new javax.swing.JTextArea();
    southPanel = new javax.swing.JPanel();
    previewButton = new javax.swing.JButton();
    importButton = new javax.swing.JButton();

    setTitle("ClassImporter");

    mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
    mainPanel.setLayout(new java.awt.BorderLayout());

    nonTerminalLabel.setText("Non terminal classes file:");

    selectNonTerminalButton.setText("Select");
    selectNonTerminalButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        selectNonTerminalButtonActionPerformed(evt);
      }
    });

    terminalLabel.setText("Terminal classes file:");

    selectTerminalButton.setText("Select");
    selectTerminalButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        selectTerminalButtonActionPerformed(evt);
      }
    });

    urlLabel.setText("Services URL:");

    usernameLabel.setText("Username:");

    passwordLabel.setText("Password:");

    passwordField.setText("jPasswordField1");

    javax.swing.GroupLayout northPanelLayout = new javax.swing.GroupLayout(northPanel);
    northPanel.setLayout(northPanelLayout);
    northPanelLayout.setHorizontalGroup(
      northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(northPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(terminalLabel)
          .addComponent(nonTerminalLabel)
          .addComponent(urlLabel)
          .addComponent(usernameLabel)
          .addComponent(passwordLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(northPanelLayout.createSequentialGroup()
            .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(terminalTextField)
              .addComponent(nonTerminalTextField))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(selectNonTerminalButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(selectTerminalButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(northPanelLayout.createSequentialGroup()
            .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(passwordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
              .addComponent(usernameTextField, javax.swing.GroupLayout.Alignment.LEADING))
            .addGap(0, 199, Short.MAX_VALUE))
          .addComponent(urlTextField))
        .addContainerGap())
    );
    northPanelLayout.setVerticalGroup(
      northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(northPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(nonTerminalLabel)
          .addComponent(nonTerminalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(selectNonTerminalButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(terminalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(selectTerminalButton)
          .addComponent(terminalLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(urlLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(usernameLabel)
          .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(passwordLabel)
          .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 3, Short.MAX_VALUE))
    );

    mainPanel.add(northPanel, java.awt.BorderLayout.PAGE_START);

    classTree.setModel(null);
    treeScrollPane.setViewportView(classTree);

    tabbedPane.addTab("Classification", treeScrollPane);

    summaryTextArea.setEditable(false);
    summaryTextArea.setColumns(20);
    summaryTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    summaryTextArea.setRows(5);
    summaryScrollPane.setViewportView(summaryTextArea);

    tabbedPane.addTab("Summary", summaryScrollPane);

    detailTextArea.setEditable(false);
    detailTextArea.setColumns(20);
    detailTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    detailTextArea.setRows(5);
    detailScrollPane.setViewportView(detailTextArea);

    tabbedPane.addTab("Detail", detailScrollPane);

    mainPanel.add(tabbedPane, java.awt.BorderLayout.CENTER);
    tabbedPane.getAccessibleContext().setAccessibleName("");

    previewButton.setText("Preview");
    previewButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        previewButtonActionPerformed(evt);
      }
    });
    southPanel.add(previewButton);

    importButton.setText("Import");
    importButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importButtonActionPerformed(evt);
      }
    });
    southPanel.add(importButton);

    mainPanel.add(southPanel, java.awt.BorderLayout.SOUTH);

    getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void selectNonTerminalButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectNonTerminalButtonActionPerformed
  {//GEN-HEADEREND:event_selectNonTerminalButtonActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileFilter(new FileFilter()
    {
      @Override
      public boolean accept(File f)
      {
        return f.getName().toLowerCase().endsWith(".csv");
      }

      @Override
      public String getDescription()
      {
        return "Comma separated values (*.csv)";
      }
    });
    int result = fileChooser.showDialog(this, "Select");
    if (result == JFileChooser.APPROVE_OPTION)
    {
      File file = fileChooser.getSelectedFile();
      nonTerminalTextField.setText(file.getAbsolutePath());
    }
  }//GEN-LAST:event_selectNonTerminalButtonActionPerformed

  private void selectTerminalButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectTerminalButtonActionPerformed
  {//GEN-HEADEREND:event_selectTerminalButtonActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileFilter(new FileFilter()
    {
      @Override
      public boolean accept(File f)
      {
        return f.getName().toLowerCase().endsWith(".csv");
      }

      @Override
      public String getDescription()
      {
        return "Comma separated values (*.csv)";
      }
    });
    int result = fileChooser.showDialog(this, "Select");
    if (result == JFileChooser.APPROVE_OPTION)
    {
      File file = fileChooser.getSelectedFile();
      terminalTextField.setText(file.getAbsolutePath());
    }
  }//GEN-LAST:event_selectTerminalButtonActionPerformed

  private void previewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previewButtonActionPerformed
  {//GEN-HEADEREND:event_previewButtonActionPerformed
    startTask(false);
  }//GEN-LAST:event_previewButtonActionPerformed

  private void importButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importButtonActionPerformed
  {//GEN-HEADEREND:event_importButtonActionPerformed
    int result = JOptionPane.showConfirmDialog(this, 
      "Import classification to service?", "Warning", 
      JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
    if (result == JOptionPane.YES_OPTION)
    {
      startTask(true);
    }
  }//GEN-LAST:event_importButtonActionPerformed

  public void completed()
  {
    task = null;
    previewButton.setEnabled(true);
    importButton.setEnabled(true);
    setCursor(Cursor.getDefaultCursor());
  }
  
  public void log(final String message, final boolean important)
  {
    SwingUtilities.invokeLater(new Runnable()
    {
      @Override
      public void run()
      {
        detailTextArea.append(message + "\n");
        if (important)
        {
          summaryTextArea.append(message + "\n");          
        }
      }
    });
  }

  private void startTask(boolean update)
  {
    if (task == null)
    {
      classTree.setModel(null);
      summaryTextArea.setText("");
      detailTextArea.setText("");
      previewButton.setEnabled(false);
      importButton.setEnabled(false);
      
      task = new ImportTask(this, update);
      task.start();
      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    }    
  }
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {    
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(ClassImporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(ClassImporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(ClassImporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(ClassImporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

   
    UIDefaults uiDefaults = UIManager.getLookAndFeel().getDefaults();
    if (System.getProperty("os.name").contains("Windows"))
    {
      uiDefaults.put("defaultFont", new Font("Segoe UI", 0, 12));
    }    
    
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      @Override
      public void run()
      {
        ClassImporter importer = new ClassImporter();
        importer.setSize(800, 600);
        importer.setLocationRelativeTo(null);
        importer.setVisible(true);
      }
    });
  }
  
  private void loadProperties()
  {    
    File file = getPropertiesFile();
    if (file.exists())
    {
      try
      {
        Properties properties = new Properties();
        FileInputStream is = new FileInputStream(file);
        try
        {
          properties.load(is);
          nonTerminalTextField.setText(properties.getProperty("nonTerminalFile"));
          terminalTextField.setText(properties.getProperty("terminalFile"));
          urlTextField.setText(properties.getProperty("url"));
          usernameTextField.setText(properties.getProperty("username"));
          passwordField.setText(properties.getProperty("password"));
        }
        finally
        {
          is.close();
        }
      }
      catch (Exception ex)
      {        
      }
    }
  }
  
  private void saveProperties()
  {
    File file = getPropertiesFile();
    Properties properties = new Properties();
    properties.setProperty("nonTerminalFile", nonTerminalTextField.getText());
    properties.setProperty("terminalFile", terminalTextField.getText());
    properties.setProperty("url", urlTextField.getText());
    properties.setProperty("username", usernameTextField.getText());
    properties.setProperty("password", new String(passwordField.getPassword()));
    try
    {
      FileOutputStream os = new FileOutputStream(file);
      try
      {
        properties.store(os, "ClassImporter");
      }
      finally
      {
        os.close();
      }
    }
    catch (Exception ex)
    {      
    }
  }
  
  private File getPropertiesFile()
  {
    String homeDir = System.getProperty("user.home");
    return new File(homeDir, ".classimporter.properties");
  } 
  
  private void initImporter()
  {
    loadProperties();
    addWindowListener(new WindowAdapter()
    {
      @Override
      public void windowClosing(WindowEvent e)
      {
        saveProperties();
      }      
    });    
    classTree.setCellRenderer(new ClassNodeRenderer());
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTree classTree;
  private javax.swing.JScrollPane detailScrollPane;
  private javax.swing.JTextArea detailTextArea;
  private javax.swing.JButton importButton;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JLabel nonTerminalLabel;
  private javax.swing.JTextField nonTerminalTextField;
  private javax.swing.JPanel northPanel;
  private javax.swing.JPasswordField passwordField;
  private javax.swing.JLabel passwordLabel;
  private javax.swing.JButton previewButton;
  private javax.swing.JButton selectNonTerminalButton;
  private javax.swing.JButton selectTerminalButton;
  private javax.swing.JPanel southPanel;
  private javax.swing.JScrollPane summaryScrollPane;
  private javax.swing.JTextArea summaryTextArea;
  private javax.swing.JTabbedPane tabbedPane;
  private javax.swing.JLabel terminalLabel;
  private javax.swing.JTextField terminalTextField;
  private javax.swing.JScrollPane treeScrollPane;
  private javax.swing.JLabel urlLabel;
  private javax.swing.JTextField urlTextField;
  private javax.swing.JLabel usernameLabel;
  private javax.swing.JTextField usernameTextField;
  // End of variables declaration//GEN-END:variables
}
