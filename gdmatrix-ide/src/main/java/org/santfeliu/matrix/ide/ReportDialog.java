/*
 * GDMatrix
 *  
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *  
 * This program is licensed and may be used, modified and redistributed under 
 * the terms of the European Public License (EUPL), either version 1.1 or (at 
 * your option) any later version as soon as they are approved by the European 
 * Commission.
 *  
 * Alternatively, you may redistribute and/or modify this program under the 
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either  version 3 of the License, or (at your option) 
 * any later version. 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *    
 * See the licenses for the specific language governing permissions, limitations 
 * and more details.
 *    
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along 
 * with this program; if not, you may find them at: 
 *    
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/ 
 * and 
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.matrix.ide;

import java.awt.Desktop;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.URI;
import java.net.URL;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import org.apache.commons.lang.StringUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author blanquepa
 */
public class ReportDialog extends javax.swing.JDialog
{
  private static final String REPORT_PARAMS_OPTION = "report_params";
  private MainPanel mainPanel;

  /**
   * Creates new form ReportDialog
   */
  public ReportDialog(java.awt.Frame parent, MainPanel mainPanel)
  {
    super(parent, true);
    this.mainPanel = mainPanel; 
    initComponents();
    loadStoredParameters();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jToolBar1 = new javax.swing.JToolBar();
    addButton = new javax.swing.JButton();
    removeButton = new javax.swing.JButton();
    executeButton = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    parametersTable = new javax.swing.JTable();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Report execution");

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/ide/resources/icon/add.gif"))); // NOI18N
    addButton.setText("Add parameter");
    addButton.setFocusable(false);
    addButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    addButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        addButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(addButton);

    removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/ide/resources/icon/remove.gif"))); // NOI18N
    removeButton.setText("Remove parameter");
    removeButton.setFocusable(false);
    removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    removeButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        removeButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(removeButton);

    executeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/santfeliu/matrix/ide/resources/icon/run.gif"))); // NOI18N
    executeButton.setText("Execute");
    executeButton.setFocusable(false);
    executeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    executeButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        executeButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(executeButton);

    parametersTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Parameter", "Value"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }
    });
    parametersTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    parametersTable.setNextFocusableComponent(executeButton);
    jScrollPane1.setViewportView(parametersTable);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
  {//GEN-HEADEREND:event_addButtonActionPerformed
    addRow();
  }//GEN-LAST:event_addButtonActionPerformed

  private void removeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeButtonActionPerformed
  {//GEN-HEADEREND:event_removeButtonActionPerformed
    removeRow();
  }//GEN-LAST:event_removeButtonActionPerformed

  private void executeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_executeButtonActionPerformed
  {//GEN-HEADEREND:event_executeButtonActionPerformed
    executeReport();
  }//GEN-LAST:event_executeButtonActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(ReportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(ReportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(ReportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(ReportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        ReportDialog dialog = new ReportDialog(new javax.swing.JFrame(), null);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }
  
  public void showDialog()
  {
    setVisible(true);
  }  
  
  private void addRow() {                                                  
    int selectedRow = parametersTable.getSelectedRow();
    DefaultTableModel tableModel = (DefaultTableModel)parametersTable.getModel();
    tableModel.addRow(new String[2]);
    tableModel.fireTableRowsInserted(selectedRow, selectedRow);
    selectedRow = selectedRow > 0 ? selectedRow + 1 : tableModel.getRowCount() - 1;    
    parametersTable.changeSelection(selectedRow, 0, false, false);
  }                                                 

  private void removeRow() {                                                     
    int selectedRow = parametersTable.getSelectedRow();
    if (selectedRow < 0)
      selectedRow = parametersTable.getRowCount() - 1;
    if (selectedRow >= 0)  
    {
      DefaultTableModel tableModel = (DefaultTableModel)parametersTable.getModel();
      tableModel.removeRow(selectedRow);
      tableModel.fireTableRowsDeleted(selectedRow, selectedRow);
    }
  } 
  
  private void executeReport()
  {
    try
    {
      if (parametersTable.isEditing())
      {
        TableCellEditor editor = parametersTable.getCellEditor();
        if (editor != null) {
          editor.stopCellEditing();
        }        
      }
      
      DefaultTableModel tableModel = (DefaultTableModel)parametersTable.getModel();
      StringBuilder sb = new StringBuilder();
      sb.append("charset_encoding=utf-8");
      for (int i = 0; i < tableModel.getRowCount(); i++)
      {
        String name = (String)tableModel.getValueAt(i, 0);
        String value = (String)tableModel.getValueAt(i, 1);
        //if (i > 0)
        sb.append("&");
        sb.append(name);
        sb.append("=");
        sb.append(value);
      }
      
      //Browser invocation
      String reportName = mainPanel.getActivePanel().getDisplayName();
      ConnectionParameters connParams = mainPanel.getConnectionPanel().getSelectedConnection();
      URL url = new URL(connParams.getURL());
      URI uri = new URI(url.getProtocol(), null, url.getHost(), -1, "/reports/" + reportName + ".html", sb.toString(), null);
      Desktop.getDesktop().browse(uri);
      
    }
    catch (Exception ex)
    {
      Logger.getLogger(ReportDialog.class.getName()).log(Level.SEVERE, null, ex);
    }    
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JButton executeButton;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JTable parametersTable;
  private javax.swing.JButton removeButton;
  // End of variables declaration//GEN-END:variables

  private void loadStoredParameters()
  {
    String paramString = Options.get(REPORT_PARAMS_OPTION);
    if (paramString != null)
    {
      try
      {
        Map propMap = (Map) new JSONParser().parse(paramString);
        Iterator it = propMap.entrySet().iterator();
        DefaultTableModel tableModel = (DefaultTableModel)parametersTable.getModel();
        while(it.hasNext())
        {
          Map.Entry entry = (Map.Entry)it.next();
          String name = (String)entry.getKey();
          String value = (String)entry.getValue();
          tableModel.addRow(new String[]{name, value});
        }
      }
      catch (ParseException ex)
      {
        Logger.getLogger(ReportDialog.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
    
    addWindowListener(new WindowAdapter() 
    {
      @Override
      public void windowClosed(WindowEvent e) 
      {
        storeParams();
      }

      private void storeParams()
      {
        JSONObject jsonParams = new JSONObject();
        if (parametersTable.isEditing())
        {
          TableCellEditor editor = parametersTable.getCellEditor();
          if (editor != null) {
            editor.stopCellEditing();
          }        
        }        
        
        DefaultTableModel tableModel = (DefaultTableModel)parametersTable.getModel();
        for (int i = 0; i < tableModel.getRowCount(); i++)
        {
          String name = (String)tableModel.getValueAt(i, 0);
          if (!StringUtils.isBlank(name))
          {
            String value = (String)tableModel.getValueAt(i, 1);
            jsonParams.put(name, value);
          }
        }
        Options.set(REPORT_PARAMS_OPTION, jsonParams.toJSONString());        
      }
    });      
  }
}
