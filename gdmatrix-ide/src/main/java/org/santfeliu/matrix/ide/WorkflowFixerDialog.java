/*
 * GDMatrix
 *  
 * Copyright (C) 2020, Ajuntament de Sant Feliu de Llobregat
 *  
 * This program is licensed and may be used, modified and redistributed under 
 * the terms of the European Public License (EUPL), either version 1.1 or (at 
 * your option) any later version as soon as they are approved by the European 
 * Commission.
 *  
 * Alternatively, you may redistribute and/or modify this program under the 
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either  version 3 of the License, or (at your option) 
 * any later version. 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *    
 * See the licenses for the specific language governing permissions, limitations 
 * and more details.
 *    
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along 
 * with this program; if not, you may find them at: 
 *    
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/ 
 * and 
 * https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.matrix.ide;

import java.awt.Color;
import java.awt.Component;
import java.text.MessageFormat;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;
import org.santfeliu.workflow.Workflow;
import org.santfeliu.workflow.util.WorkflowFixer;
import org.santfeliu.workflow.util.WorkflowFixer.Issue;

/**
 *
 * @author realor
 */
public class WorkflowFixerDialog extends javax.swing.JDialog
{
  WorkflowPanel workflowPanel;
  List<WorkflowFixer.Issue> issues;

  /** Creates new form WorkflowFixDialog */
  public WorkflowFixerDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
  }

  public void init(WorkflowPanel workflowPanel, List<Issue> issues)
  {
    this.workflowPanel = workflowPanel;
    this.issues = issues;
    DefaultListModel model = new DefaultListModel();
    int errors = 0;
    int warnings = 0;
    for (int i = 0; i < issues.size(); i++)
    {
      Issue issue = issues.get(i);
      model.addElement(issue);
      if ("error".equals(issue.getLevel()))
      {
        errors++;
      }
      else
      {
        warnings++;
      }
    }
    issueList.setModel(model);
    String summary = MessageFormat.format(
      "{0} issues found ({1} errors, {2} warnings):",
      issues.size(), errors, warnings);
    summaryLabel.setText(summary);

    issueList.setCellRenderer(new DefaultListCellRenderer()
    {
      ImageIcon warningIcon =
        new ImageIcon(getClass().getResource("resources/icon/warning.gif"));
      ImageIcon errorIcon =
        new ImageIcon(getClass().getResource("resources/icon/error.gif"));

      @Override
      public Component getListCellRendererComponent(
        JList list,
	      Object value,
        int index,
        boolean isSelected,
        boolean cellHasFocus)
      {
        Component c = super.getListCellRendererComponent(list, value, index, 
          isSelected, cellHasFocus);
        Issue issue = (Issue)value;

        if ("warning".equals(issue.getLevel()))
        {
          setIcon(warningIcon);
        }
        else
        {
          setIcon(errorIcon);
        }
        if (issue.getWith() == null)
        {
          setForeground(Color.RED);
        }
        return c;
      }
    });
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    basePanel = new javax.swing.JPanel();
    scrollPane = new javax.swing.JScrollPane();
    issueList = new javax.swing.JList();
    northPanel = new javax.swing.JPanel();
    summaryLabel = new javax.swing.JLabel();
    southPanel = new javax.swing.JPanel();
    fixAllButton = new javax.swing.JButton();
    fixSelectedButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Workflow fixer");

    basePanel.setLayout(new java.awt.BorderLayout());

    issueList.setMinimumSize(new java.awt.Dimension(500, 400));
    scrollPane.setViewportView(issueList);

    basePanel.add(scrollPane, java.awt.BorderLayout.CENTER);

    northPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 1, 6, 1));
    northPanel.setLayout(new java.awt.BorderLayout());
    northPanel.add(summaryLabel, java.awt.BorderLayout.CENTER);

    basePanel.add(northPanel, java.awt.BorderLayout.PAGE_START);

    fixAllButton.setText("Fix all");
    fixAllButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fixAllButtonActionPerformed(evt);
      }
    });
    southPanel.add(fixAllButton);

    fixSelectedButton.setText("Fix selected");
    fixSelectedButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fixSelectedButtonActionPerformed(evt);
      }
    });
    southPanel.add(fixSelectedButton);

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });
    southPanel.add(cancelButton);

    basePanel.add(southPanel, java.awt.BorderLayout.PAGE_END);

    getContentPane().add(basePanel, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void fixSelectedButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fixSelectedButtonActionPerformed
  {//GEN-HEADEREND:event_fixSelectedButtonActionPerformed
    for (int i = 0; i < issueList.getModel().getSize(); i++)
    {
      Issue issue = (Issue)issueList.getModel().getElementAt(i);
      if (issueList.getSelectionModel().isSelectedIndex(i))
      {
        issue.fix();
      }
    }
    Workflow workflow = workflowPanel.getWorkflow();
    workflowPanel.setWorkflow(workflow); // force model update
    workflowPanel.setModified(true);

    setVisible(false);
    dispose();
  }//GEN-LAST:event_fixSelectedButtonActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed
    setVisible(false);
    dispose();
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void fixAllButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fixAllButtonActionPerformed
  {//GEN-HEADEREND:event_fixAllButtonActionPerformed
    for (Issue issue : issues)
    {
      issue.fix();
    }
    Workflow workflow = workflowPanel.getWorkflow();
    workflowPanel.setWorkflow(workflow); // force model update
    workflowPanel.setModified(true);

    setVisible(false);
    dispose();
  }//GEN-LAST:event_fixAllButtonActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable()
    {

      public void run()
      {
        WorkflowFixerDialog dialog =
          new WorkflowFixerDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {

          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel basePanel;
  private javax.swing.JButton cancelButton;
  private javax.swing.JButton fixAllButton;
  private javax.swing.JButton fixSelectedButton;
  private javax.swing.JList issueList;
  private javax.swing.JPanel northPanel;
  private javax.swing.JScrollPane scrollPane;
  private javax.swing.JPanel southPanel;
  private javax.swing.JLabel summaryLabel;
  // End of variables declaration//GEN-END:variables
}
