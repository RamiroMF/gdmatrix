<?xml version="1.0" encoding="UTF-8" ?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd"
                 version="1.0">
    <description>Security</description>
    <package>org.santfeliu.security.service</package>

    <named-query name="selectUser">
      <query>
        SELECT u FROM User u WHERE trim(u.userId) = trim(:userId)
      </query>
    </named-query>

    <named-query name="updateUser">
      <query>
        UPDATE User as u 
        SET u.userId = :userId, 
            u.displayName = :displayName,
            u.password = :password,        
            u.personId = :personId,
            u.lockedValue = :lockedValue,
            u.creationUserId = :creationUserId, 
            u.stddgr = :stddgr, 
            u.stdhgr = :stdhgr,
            u.changeUserId = :changeUserId, 
            u.stddmod = :stddmod, 
            u.stdhmod = :stdhmod
        WHERE trim(u.userId) = trim(:userId)
      </query>
    </named-query>

    <named-query name="removeUser">
      <query>
        DELETE FROM User as u WHERE trim(u.userId) = trim(:userId)
      </query>
    </named-query> 

    <named-query name="findUsersMultipleId">
      <query>
        SELECT u
        FROM User u
        WHERE (locate(concat(',', concat(upper(trim(u.userId)), ',')), :userId) > 0 or :userId is null)
          and (upper(u.displayName) like :displayName or :displayName is null)
          and (concat(u.stddmod, u.stdhmod) &lt;= :endDateTime or :endDateTime is null)
          and (concat(u.stddmod, u.stdhmod) &gt;= :startDateTime or :startDateTime is null)
        ORDER BY u.userId
      </query>
    </named-query>

    <named-query name="findUsersSingleId">
      <query>
        SELECT u
        FROM User u
        WHERE (upper(trim(u.userId)) like :userId or :userId is null)
          and (upper(u.displayName) like :displayName or :displayName is null)
          and (concat(u.stddmod, u.stdhmod) &lt;= :endDateTime or :endDateTime is null)
          and (concat(u.stddmod, u.stdhmod) &gt;= :startDateTime or :startDateTime is null)
        ORDER BY u.userId
      </query>
    </named-query>


    <named-query name="countUsersMultipleId">
      <query>
        SELECT count(u)
        FROM User u
        WHERE (locate(concat(',', concat(upper(trim(u.userId)), ',')), :userId) > 0 or :userId is null)
          and (upper(u.displayName) like :displayName or :displayName is null)
          and (concat(u.stddmod, u.stdhmod) &lt;= :endDateTime or :endDateTime is null)
          and (concat(u.stddmod, u.stdhmod) &gt;= :startDateTime or :startDateTime is null)
      </query>
    </named-query>

    <named-query name="countUsersSingleId">
      <query>
        SELECT count(u)
        FROM User u
        WHERE (upper(trim(u.userId)) like :userId or :userId is null)
          and (upper(u.displayName) like :displayName or :displayName is null)
          and (concat(u.stddmod, u.stdhmod) &lt;= :endDateTime or :endDateTime is null)
          and (concat(u.stddmod, u.stdhmod) &gt;= :startDateTime or :startDateTime is null)
      </query>
    </named-query>

    <named-query name="listUserRoles">
      <query>
        SELECT u.roleId FROM UserInRole u WHERE trim(u.userId) = trim(:userId)
      </query>
    </named-query>

    <named-query name="removeRole">
      <query>
        DELETE FROM Role r WHERE r.roleId = :roleId
      </query>
    </named-query>

    <named-query name="findRolesMultipleId">
      <query>
        SELECT r
        FROM Role r
        WHERE (locate(concat(',', concat(upper(r.roleId), ',')), :roleId) > 0 or :roleId is null)
          and (upper(r.name) like :name or :name is null)
          and (r.roleTypeId = :roleTypeId or :roleTypeId is null)
          and (r.changeDateTime &lt;= :endDateTime or :endDateTime is null)
          and (r.changeDateTime &gt;= :startDateTime or :startDateTime is null)
        ORDER BY r.roleId
      </query>
    </named-query>
    
    <named-query name="findRolesSingleId">
      <query>
        SELECT r
        FROM Role r
        WHERE (upper(r.roleId) like :roleId or :roleId is null)
          and (upper(r.name) like :name or :name is null)
          and (r.roleTypeId = :roleTypeId or :roleTypeId is null)
          and (r.changeDateTime &lt;= :endDateTime or :endDateTime is null)
          and (r.changeDateTime &gt;= :startDateTime or :startDateTime is null)
        ORDER BY r.roleId
      </query>
    </named-query>

    <named-query name="countRolesMultipleId">
      <query>
        SELECT count(r)
        FROM Role r
        WHERE (locate(concat(',', concat(upper(r.roleId), ',')), :roleId) > 0 or :roleId is null)
          and (upper(r.name) like :name or :name is null)
          and (r.roleTypeId = :roleTypeId or :roleTypeId is null)
          and (r.changeDateTime &lt;= :endDateTime or :endDateTime is null)
          and (r.changeDateTime &gt;= :startDateTime or :startDateTime is null)
      </query>
    </named-query>

    <named-query name="countRolesSingleId">
      <query>
        SELECT count(r)
        FROM Role r
        WHERE (upper(r.roleId) like :roleId or :roleId is null)
          and (upper(r.name) like :name or :name is null)
          and (r.roleTypeId = :roleTypeId or :roleTypeId is null)
          and (r.changeDateTime &lt;= :endDateTime or :endDateTime is null)
          and (r.changeDateTime &gt;= :startDateTime or :startDateTime is null)
      </query>
    </named-query>

    <named-query name="removeUserInRole">
      <query>
        DELETE FROM UserInRole ur
        WHERE trim(ur.userId) = trim(:userId)
          and (ur.roleId = :roleId or :roleId is null)
      </query>
    </named-query>

    <named-query name="updateUserInRole">
      <query>
        UPDATE UserInRole ur
        SET ur.comments = :comments, ur.startDate = :startDate,
            ur.endDate = :endDate
        WHERE trim(ur.userId) = trim(:userId)
          and ur.roleId = :roleId
      </query>
    </named-query>
    
    <named-query name="findUserInRoles">
      <query>
        SELECT ur
        FROM UserInRole ur
        WHERE (trim(ur.userId) = trim(:userId) or :userId is null)
          and (ur.roleId = :roleId or :roleId is null)
          and (upper(ur.comments) like :comments or :comments is null)
          and
          (
            (
              (:minDate is null)
              and
              (:maxDate is null)
            )
            or
            (
              (:minDate is null)
              and
              (:maxDate &gt;= ur.startDate)
            )
            or
            (
              (:maxDate is null)
              and
              (:minDate &lt;= ur.endDate)
            )
            or
            (
              (:minDate &lt;= ur.endDate or ur.endDate is null)
              and
              (:maxDate &gt;= ur.startDate or ur.startDate is null)
            )
          )
      </query>
    </named-query>

    <named-query name="findUserInRoleViews">
      <query>
        SELECT u, ur.startDate, ur.endDate
        FROM UserInRole ur, User u
        WHERE ur.userId = u.userId
          AND ur.roleId = :roleId
          AND (upper(ur.comments) like :comments or :comments is null)
          AND
          (
            (
              (:minDate is null)
              and
              (:maxDate is null)
            )
            or
            (
              (:minDate is null)
              and
              (:maxDate &gt;= ur.startDate)
            )
            or
            (
              (:maxDate is null)
              and
              (:minDate &lt;= ur.endDate)
            )
            or
            (
              (:minDate &lt;= ur.endDate or ur.endDate is null)
              and
              (:maxDate &gt;= ur.startDate or ur.startDate is null)
            )
          )
        ORDER BY ur.userId
      </query>
    </named-query>

    <named-query name="findRoleInUserViews">
      <query>
        SELECT r, ur.startDate, ur.endDate
        FROM UserInRole ur, Role r
        WHERE ur.roleId = r.roleId
          AND trim(ur.userId) = trim(:userId)
          AND (upper(ur.comments) like :comments or :comments is null)
          AND
          (
            (
              (:minDate is null)
              and
              (:maxDate is null)
            )
            or
            (
              (:minDate is null)
              and
              (:maxDate &gt;= ur.startDate)
            )
            or
            (
              (:maxDate is null)
              and
              (:minDate &lt;= ur.endDate)
            )
            or
            (
              (:minDate &lt;= ur.endDate or ur.endDate is null)
              and
              (:maxDate &gt;= ur.startDate or ur.startDate is null)
            )
          )
        ORDER BY ur.roleId
      </query>
    </named-query>

    <named-query name="findRoleInRoles">
      <query>
        SELECT r
        FROM RoleInRole r
        WHERE (r.containerRoleId = :containerRoleId or :containerRoleId is null)
          and (r.includedRoleId = :includedRoleId or :includedRoleId is null)
      </query>
    </named-query>

    <named-query name="findIncludedRoleViews">
      <query>
        SELECT r
        FROM RoleInRole rr, Role r
        WHERE rr.includedRoleId = r.roleId
          AND rr.containerRoleId = :containerRoleId
      </query>
    </named-query>

    <named-query name="findContainerRoleViews">
      <query>
        SELECT r
        FROM RoleInRole rr, Role r
        WHERE rr.containerRoleId = r.roleId
          AND rr.includedRoleId = :includedRoleId
      </query>
    </named-query>

    <named-query name="touchUser">
      <query>
        UPDATE User u SET u.stddmod = :date, u.stdhmod = :time WHERE
        trim(u.userId) = :userId
      </query>
    </named-query>

    <named-query name="touchRole">
      <query>
        UPDATE Role r SET r.changeDateTime = :dateTime WHERE
        r.roleId = :roleId
      </query>
    </named-query>

    <entity class="org.santfeliu.security.service.DBUser" name="User"
            access="PROPERTY">
      <!-- Synonym of GENESYS5.ORG_USUARI -->
      <table name="ORG_USUARI"  />
      <attributes>
        <id name="userId">
          <column name="USRCOD" />
        </id>
        <basic name="password">
          <column name="USRPASS" />
        </basic>
        <basic name="displayName">
          <column name="USRDESC" />
        </basic>
        <basic name="personId">
          <column name="PERSCOD" />
        </basic>
        <basic name="lockedValue">
          <column name="BLOQUEJAT" />
        </basic>
        <basic name="creationUserId">
          <column name="STDUGR" />
        </basic>
        <basic name="changeUserId">
          <column name="STDUMOD" />
        </basic>
        <basic name="stddgr">
          <column name="STDDGR" />
        </basic>
        <basic name="stdhgr">
          <column name="STDHGR" />
        </basic>
        <basic name="stddmod">
          <column name="STDDMOD" />
        </basic>
        <basic name="stdhmod">
          <column name="STDHMOD" />
        </basic>
      </attributes>
    </entity>

    <entity class="org.santfeliu.security.service.DBRole" name="Role"
            access="PROPERTY">
      <table name="APL_ROL" />
      <attributes>
        <id name="roleId">
          <column name="ROLCOD" />
        </id>
        <basic name="name">
            <column name="ROLDESC" />
        </basic>
        <basic name="description">
            <column name="OBSERV" />
        </basic>
        <basic name="roleTypeId">
            <column name="ROLETYPEID" />
        </basic>
        <basic name="creationUserId">
            <column name="CREATIONUSERID" />
        </basic>
        <basic name="creationDateTime">
            <column name="CREATIONDT" />
        </basic>
        <basic name="changeUserId">
            <column name="CHANGEUSERID" />
        </basic>
        <basic name="changeDateTime">
            <column name="CHANGEDT" />
        </basic>
      </attributes>
    </entity>

    <entity class="org.santfeliu.security.service.DBUserInRole"
            name="UserInRole" access="PROPERTY">
      <table name="APL_ROLUSR" />
      <attributes>
        <id name="userId">
          <column name="USRCOD" />
        </id>
        <id name="roleId">
          <column name="ROLCOD" />
        </id>
        <basic name="comments">
            <column name="COMMENTS" />
        </basic>
        <basic name="startDate">
            <column name="STARTDATE" />
        </basic>
        <basic name="endDate">
            <column name="ENDDATE" />
        </basic>
      </attributes>
    </entity>

    <entity class="org.santfeliu.security.service.DBRoleInRole" 
            name="RoleInRole" access="PROPERTY">
      <table name="APL_ROLROL" />
      <id-class class="org.santfeliu.security.service.DBRoleInRolePK" />
      <attributes>
        <id name="containerRoleId">
          <column name="ROLCOD" />
        </id>
        <id name="includedRoleId">
          <column name="INROLCOD" />
        </id>
      </attributes>
    </entity>

</entity-mappings>
